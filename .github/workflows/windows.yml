name: Windows

on:
  workflow_dispatch:
  release:
    types: [published]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      max-parallel: 1

    env:
      PROJECT_NAME: "rfxgen"
      PROJECT_VERSION: "2.5"
      RELEASE_DIR_NAME: "rfxgen_dev_win_x64"
      RELEASE_PATH: "build\\rfxgen_dev_win_x64"
      VS_RELEASE_PATH: "rfxgen\\projects\\VS2022\\build\\rfxgen\\bin\\x64\\Release"

    steps:
    - name: Checkout this repo
      uses: actions/checkout@master
      with:
        path: ${{ env.PROJECT_NAME }}
      
    - name: Checkout raylib repo
      uses: actions/checkout@v2
      with:
        repository: raysan5/raylib
        path: raylib
        
    # NOTE: Visual Studio project build configuration already defines all required directories where project is generated
    # $(SolutionDir)\build\$(ProjectName)\bin\$(Platform)\$(Configuration)\
    # By default for this build: rfxgen\projects\VS2022\build\rfxgen\bin\x64\Release\
    - name: Setup Release Paths
      run: |
        echo "RELEASE_DIR_NAME=${{ env.PROJECT_NAME }}_v${{ env.PROJECT_VERSION }}_win_x64" >> $GITHUB_ENV
        echo "RELEASE_PATH=build\\${{ env.PROJECT_NAME }}_v${{ env.PROJECT_VERSION }}_win_x64" >> $GITHUB_ENV
        echo "VS_RELEASE_PATH=${{ env.PROJECT_NAME }}\\project\\VS2022\\build\\${{ env.PROJECT_NAME }}\\bin\\x64\\Release" >> $GITHUB_ENV
      shell: bash

    - name: Setup Environment
      run: | 
        dir
        mkdir build
        cd build
        mkdir ${{ env.RELEASE_DIR_NAME }}
        cd ..
      shell: cmd

    # Setup MSBuild.exe path if required
    - name: Setup MSBuild path
      uses: microsoft/setup-msbuild@v1.1

    - name: Build Solution
      run: |
        dir
        cd rfxgen/projects/VS2022
        msbuild.exe ${{ env.PROJECT_NAME }}.sln /target:${{ env.PROJECT_NAME }} /property:Configuration=Release /property:Platform=x64
        cd ../..
      shell: cmd

    - name: Generate Artifacts
      run: |
        dir ${{ env.VS_RELEASE_PATH }}
        dir ${{ env.RELEASE_PATH }}
        copy /Y .\${{ env.VS_RELEASE_PATH }}\${{ env.PROJECT_NAME }}.exe .\${{ env.RELEASE_PATH }}\${{ env.PROJECT_NAME }}.exe
        copy /Y .\${{ env.PROJECT_NAME }}\README.md .\${{ env.RELEASE_PATH }}\README.md
        copy /Y .\${{ env.PROJECT_NAME }}\LICENSE .\${{ env.RELEASE_PATH }}\LICENSE
        cd build
        7z a ./${{ env.RELEASE_DIR_NAME }}.zip ./${{ env.RELEASE_PATH }}
        dir
      shell: cmd

    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.RELEASE_DIR_NAME }}.zip
        path: ./${{ env.RELEASE_PATH }}.zip
        
    - name: Upload Artifact to Release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./${{ env.RELEASE_PATH }}.zip
        asset_name: ${{ env.RELEASE_DIR_NAME }}.zip
        asset_content_type: application/zip
      if: github.event_name == 'release' && github.event.action == 'published'
