name: Linux

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      PROJECT_NAME: "rfxgen"
      RELEASE_PATH: "rfxgen_dev_linux_x64"
      BUILD_PATH: "rfxgen/build"
      PROJECT_SOURCES: |
        rfxgen.c
        external/tinyfiledialogs.c.c
      RAYLIB_CONFIG: |
        -DEXTERNAL_CONFIG_FLAGS 
        -DSUPPORT_MODULE_RSHAPES 
        -DSUPPORT_MODULE_RTEXTURES 
        -DSUPPORT_MODULE_RTEXT 
        -DSUPPORT_MODULE_RAUDIO 
        -DSUPPORT_EVENTS_WAITING 
        -DSUPPORT_COMPRESSION_API 
        -DSUPPORT_QUADS_DRAW_MODE 
        -DSUPPORT_IMAGE_MANIPULATION 
        -DSUPPORT_DEFAULT_FONT 
        -DSUPPORT_FILEFORMAT_TTF 
        -DSUPPORT_TEXT_MANIPULATION 
        -DSUPPORT_FILEFORMAT_WAV 
        -DSUPPORT_STANDARD_FILEIO 
        -DSUPPORT_TRACELOG
    
    steps:
    - name: Checkout this repo
      uses: actions/checkout@master
      with:
        path: ${{ env.PROJECT_NAME }}
      
    - name: Checkout raylib repo
      uses: actions/checkout@v2
      with:
        repository: raysan5/raylib
        path: raylib
        
    - name: Setup Release Paths
      run: |
        echo "RELEASE_PATH=${{ env.PROJECT_NAME }}_v${{ github.event.release.tag_name }}_linux_x64" >> $GITHUB_ENV
        echo "BUILD_PATH=${{ env.PROJECT_NAME }}\\build" >> $GITHUB_ENV
      shell: bash
      if: github.event_name == 'release' && github.event.action == 'published'
    
    - name: Setup Environment
      run: | 
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends libglfw3 libglfw3-dev libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxext-dev libxfixes-dev
        mkdir ${{ env.RELEASE_PATH }}
        ls
      shell: bash
        
    - name: Build raylib Library
      run: |
        cd raylib/src
        gcc --version
        make PLATFORM=PLATFORM_DESKTOP BUILD_MODE=RELEASE RAYLIB_LIBTYPE=STATIC 

    - name: Build Product
      run: |
        cd ${{ env.PROJECT_NAME }}
        make PLATFORM=PLATFORM_DESKTOP BUILD_MODE=RELEASE PROJECT_SOURCE_FILES=${{ env.PROJECT_SOURCES }} PROJECT_BUILD_PATH=${{ env.BUILD_PATH }} RAYLIB_PATH="./${{ env.PROJECT_NAME }}/raylib" CFLAGS=${{ env.RAYLIB_CONFIG }} -B

    - name: Generate Artifacts
      run: |
        ls ${{ env.BUILD_PATH }}
        cp ${{ env.BUILD_PATH }}/${{ env.PROJECT_NAME }}.exe ${{ env.RELEASE_PATH }}
        cp ${{ env.PROJECT_NAME }}/README.md ${{ env.RELEASE_PATH }}
        cp ${{ env.PROJECT_NAME }}/LICENSE ${{ env.RELEASE_PATH }}
        ls ${{ env.RELEASE_PATH }}
        7z a ./${{ env.RELEASE_PATH }}.zip ./${{ env.RELEASE_PATH }}

    # Issue: Double zip: https://github.com/actions/upload-artifact/issues/39
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.RELEASE_PATH }}.zip
        path: ./${{ env.RELEASE_PATH }}.zip
        
    # Alternative: https://github.com/marketplace/actions/gh-release
    - name: Upload Artifact to Release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_name: ${{ env.RELEASE_PATH }}.zip
        asset_path: ./${{ env.RELEASE_PATH }}.zip
        asset_content_type: application/zip
      if: github.event_name == 'release' && github.event.action == 'published'
